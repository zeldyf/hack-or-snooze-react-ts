{"ast":null,"code":"var _jsxFileName = \"/Users/zeldyfriedman/Documents/React/Hack or Snooze React and TS/my-app/src/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport { BASE_URL } from \"./fetchStories\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState({\n    user: {\n      createdAt: \"\",\n      favorites: [],\n      name: \"\",\n      stories: [],\n      updatedAt: \"\",\n      username: \"\"\n    }\n  });\n  const [ownStories, setOwnStories] = useState([]);\n  const isLoggedIn = localStorage.length !== 0;\n  const storedToken = localStorage.getItem(\"token\");\n  const storedUsername = localStorage.getItem(\"username\");\n  const autoLogin = async () => {\n    if (storedToken && storedUsername) {\n      try {\n        const updatedUser = await updateUser();\n        setUser(updatedUser);\n      } catch (error) {\n        console.error(\"Auto login failed:\", error);\n      }\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      console.log(isLoggedIn);\n      await autoLogin();\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => console.log(\"User after update\", user), [user]);\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(`${BASE_URL}/login`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          user: {\n            username,\n            password\n          }\n        })\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        console.log(\"User data on login:\", userData);\n        setUser({\n          user: userData.user\n        });\n        saveCredentialsinLocalStorage(userData.token, userData.user.username);\n        console.log(isLoggedIn);\n      } else {\n        throw new Error(\"Login failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const signup = async (username, password, name) => {\n    try {\n      const response = await fetch(`${BASE_URL}/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user: {\n            username,\n            password,\n            name\n          }\n        })\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        setUser({\n          user: userData.user\n        });\n        saveCredentialsinLocalStorage(userData.token, userData.user.username);\n      } else {\n        throw new Error(\"Login failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const saveCredentialsinLocalStorage = (token, username) => {\n    console.debug(\"saveUserCredentialsInLocalStorage\");\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"username\", username);\n    console.log(localStorage);\n  };\n  const logout = () => {\n    setUser({\n      user: {\n        createdAt: \"\",\n        favorites: [],\n        name: \"\",\n        stories: [],\n        updatedAt: \"\",\n        username: \"\"\n      }\n    });\n    setOwnStories([]);\n    localStorage.clear();\n    console.log(isLoggedIn);\n  };\n  const updateUser = async () => {\n    try {\n      const response = await fetch(`${BASE_URL}/users/${storedUsername}?token=${storedToken}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        console.log(userData);\n        return userData;\n      } else {\n        throw new Error(\"User update failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  };\n  const newStory = async (author, title, url) => {\n    const token = localStorage.getItem(\"token\");\n    try {\n      const response = await fetch(`${BASE_URL}/stories`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token,\n          story: {\n            author,\n            title,\n            url\n          }\n        })\n      });\n      if (response.ok) {\n        const storyData = await response.json();\n        console.log(storyData.story);\n        setOwnStories(prevStories => [...prevStories, storyData]);\n        const updatedUser = await updateUser();\n        setUser(prevUser => ({\n          user: {\n            ...prevUser.user,\n            stories: updatedUser.user.stories\n          }\n        }));\n      } else {\n        throw new Error(\"Story submit failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const addOrDeleteFavorite = async (fetchMethod, storyId) => {\n    try {\n      const response = await fetch(`${BASE_URL}/users/${storedUsername}/favorites/${storyId}`, {\n        method: fetchMethod === \"add\" ? \"POST\" : \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: storedToken\n        })\n      });\n      if (response.ok) {\n        const updatedUser = await updateUser();\n        setUser(prevUser => ({\n          user: {\n            ...prevUser.user,\n            favorites: updatedUser.user.favorites\n          }\n        }));\n      } else {\n        throw new Error(\"Favorite failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      ownStories,\n      isLoggedIn,\n      login,\n      signup,\n      logout,\n      newStory,\n      updateUser,\n      addOrDeleteFavorite\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"sZIDdzsu0bucXH/Y0UCPi7hjWLE=\");\n_c = AuthProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n};\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","BASE_URL","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","createdAt","favorites","name","stories","updatedAt","username","ownStories","setOwnStories","isLoggedIn","localStorage","length","storedToken","getItem","storedUsername","autoLogin","updatedUser","updateUser","error","console","log","login","password","response","fetch","method","body","JSON","stringify","ok","userData","json","saveCredentialsinLocalStorage","token","Error","signup","headers","debug","setItem","logout","clear","newStory","author","title","url","story","storyData","prevStories","prevUser","addOrDeleteFavorite","fetchMethod","storyId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","$RefreshReg$"],"sources":["/Users/zeldyfriedman/Documents/React/Hack or Snooze React and TS/my-app/src/UserContext.tsx"],"sourcesContent":["import {\n  createContext,\n  FC,\n  useState,\n  useEffect,\n  useContext,\n  ReactNode,\n} from \"react\";\nimport { BASE_URL } from \"./fetchStories\";\n\nexport interface User {\n  user: {\n    createdAt: string;\n    favorites: [];\n    name: string;\n    stories: [];\n    updatedAt: string;\n    username: string;\n  };\n}\n\nexport interface StoryObj {\n    author: string;\n    createdAt: string;\n    storyId: string;\n    title: string;\n    updatedAt: string;\n    url: string;\n    username: string;\n}\n\ninterface AuthContextProps {\n  user: User;\n  ownStories: StoryObj[];\n  isLoggedIn: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  signup: (username: string, password: string, name: string) => Promise<void>;\n  logout: () => void;\n  newStory: (author: string, title: string, url: string) => Promise<void>;\n  updateUser: () => Promise<User>;\n  addOrDeleteFavorite: (\n    fetchMethod: \"add\" | \"delete\",\n    storyId: string\n  ) => Promise<void>;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nconst AuthContext = createContext<AuthContextProps | undefined>(undefined);\n\nexport const AuthProvider: FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User>({\n    user: {\n      createdAt: \"\",\n      favorites: [],\n      name: \"\",\n      stories: [],\n      updatedAt: \"\",\n      username: \"\",\n    },\n  });\n  const [ownStories, setOwnStories] = useState<StoryObj[]>([]);\n  const isLoggedIn = localStorage.length !== 0;\n  const storedToken = localStorage.getItem(\"token\");\n  const storedUsername = localStorage.getItem(\"username\");\n\n  const autoLogin = async () => {\n    if (storedToken && storedUsername) {\n      try {\n        const updatedUser = await updateUser();\n        setUser(updatedUser);\n      } catch (error) {\n        console.error(\"Auto login failed:\", error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      console.log(isLoggedIn);\n      await autoLogin();\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => console.log(\"User after update\", user), [user]);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await fetch(`${BASE_URL}/login`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          user: {\n            username,\n            password,\n          },\n        }),\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        console.log(\"User data on login:\", userData);\n        setUser({ user: userData.user });\n        saveCredentialsinLocalStorage(userData.token, userData.user.username);\n        console.log(isLoggedIn);\n      } else {\n        throw new Error(\"Login failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const signup = async (username: string, password: string, name: string) => {\n    try {\n      const response = await fetch(`${BASE_URL}/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user: {\n            username,\n            password,\n            name,\n          },\n        }),\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        setUser({ user: userData.user });\n        saveCredentialsinLocalStorage(userData.token, userData.user.username);\n      } else {\n        throw new Error(\"Login failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const saveCredentialsinLocalStorage = (token: string, username: string) => {\n    console.debug(\"saveUserCredentialsInLocalStorage\");\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"username\", username);\n    console.log(localStorage);\n  };\n\n  const logout = () => {\n    setUser({\n      user: {\n        createdAt: \"\",\n        favorites: [],\n        name: \"\",\n        stories: [],\n        updatedAt: \"\",\n        username: \"\",\n      },\n    });\n    setOwnStories([]);\n    localStorage.clear();\n    console.log(isLoggedIn);\n  };\n\n  const updateUser = async () => {\n    try {\n      const response = await fetch(\n        `${BASE_URL}/users/${storedUsername}?token=${storedToken}`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (response.ok) {\n        const userData: User = await response.json();\n        console.log(userData);\n\n        return userData;\n      } else {\n        throw new Error(\"User update failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  };\n\n  const newStory = async (author: string, title: string, url: string) => {\n    const token = localStorage.getItem(\"token\");\n    try {\n      const response = await fetch(`${BASE_URL}/stories`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          token,\n          story: {\n            author,\n            title,\n            url,\n          },\n        }),\n      });\n      if (response.ok) {\n        const storyData: {\n          author: string;\n          createdAt: string;\n          storyId: string;\n          title: string;\n          updatedAt: string;\n          url: string;\n          username: string;\n      } = await response.json();\n        console.log(storyData.story);\n        setOwnStories((prevStories) => [...prevStories, storyData]);\n        const updatedUser = await updateUser();\n        setUser((prevUser) => ({\n          user: {\n            ...prevUser.user,\n            stories: updatedUser.user.stories,\n          },\n        }));\n      } else {\n        throw new Error(\"Story submit failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const addOrDeleteFavorite = async (\n    fetchMethod: \"add\" | \"delete\",\n    storyId: string\n  ) => {\n    try {\n      const response = await fetch(\n        `${BASE_URL}/users/${storedUsername}/favorites/${storyId}`,\n        {\n          method: fetchMethod === \"add\" ? \"POST\" : \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            token: storedToken,\n          }),\n        }\n      );\n      if (response.ok) {\n        const updatedUser = await updateUser();\n        setUser((prevUser) => ({\n          user: {\n            ...prevUser.user,\n            favorites: updatedUser.user.favorites,\n          },\n        }));\n      } else {\n        throw new Error(\"Favorite failed\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        ownStories,\n        isLoggedIn,\n        login,\n        signup,\n        logout,\n        newStory,\n        updateUser,\n        addOrDeleteFavorite,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useUser = () => {\n  const context = useContext(AuthContext);\n\n  if (context === undefined) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n\n  return context;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}