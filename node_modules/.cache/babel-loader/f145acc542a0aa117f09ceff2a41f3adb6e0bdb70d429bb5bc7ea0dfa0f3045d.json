{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const BASE_URL = \"https://hack-or-snooze-v3.herokuapp.com\";\nconst storedUsername = localStorage.getItem(\"username\");\nconst storedToken = localStorage.getItem(\"token\");\nexport const fetchStories = createAsyncThunk(`stories/fetchStories`, async () => {\n  const response = await fetch(BASE_URL + \"/stories\").then(response => response.json());\n  console.log(response.stories);\n  return response.stories;\n});\nexport const newStory = createAsyncThunk(\"stories/newStory\", async ({\n  author,\n  title,\n  url\n}) => {\n  const response = await fetch(BASE_URL + \"/stories\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      token: storedToken,\n      story: {\n        author,\n        title,\n        url\n      }\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"New story failed\");\n  }\n  const storyData = await response.json();\n  console.log(\"New story added\", storyData);\n  return storyData;\n});\nexport const addOrDeleteFavorite = createAsyncThunk(\"stories/addOrDeleteFavorite\", async ({\n  fetchMethod,\n  storyId\n}) => {\n  const response = await fetch(`${BASE_URL}/users/${storedUsername}/favorites/${storyId}`, {\n    method: fetchMethod === \"add\" ? \"POST\" : \"DELETE\",\n    body: JSON.stringify({\n      token: storedToken\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`${fetchMethod} favorite failed`);\n  }\n  const userData = await response.json();\n  return userData;\n});\nexport const deleteStory = createAsyncThunk(\"stories/deleteStory\", async ({\n  storyId\n}) => {\n  const response = await fetch(`${BASE_URL}/stories/${storyId}`);\n});\nexport default fetchStories;","map":{"version":3,"names":["createAsyncThunk","BASE_URL","storedUsername","localStorage","getItem","storedToken","fetchStories","response","fetch","then","json","console","log","stories","newStory","author","title","url","method","body","JSON","stringify","token","story","ok","Error","storyData","addOrDeleteFavorite","fetchMethod","storyId","userData","deleteStory"],"sources":["/Users/zeldyfriedman/Documents/Redux/hack-or-snooze-react-ts/src/fetchStories.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const BASE_URL = \"https://hack-or-snooze-v3.herokuapp.com\";\nconst storedUsername = localStorage.getItem(\"username\");\nconst storedToken = localStorage.getItem(\"token\");\n\nexport const fetchStories = createAsyncThunk(\n  `stories/fetchStories`,\n  async () => {\n    const response = await fetch(BASE_URL + \"/stories\").then((response) =>\n      response.json()\n    );\n    console.log(response.stories);\n    return response.stories;\n  }\n);\n\nexport const newStory = createAsyncThunk(\n  \"stories/newStory\",\n  async ({\n    author,\n    title,\n    url,\n  }: {\n    author: string;\n    title: string;\n    url: string;\n  }) => {\n    const response = await fetch(BASE_URL + \"/stories\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: storedToken,\n        story: {\n          author,\n          title,\n          url,\n        },\n      }),\n    });\n    if (!response.ok) {\n      throw new Error(\"New story failed\");\n    }\n\n    const storyData = await response.json();\n    console.log(\"New story added\", storyData);\n    return storyData;\n  }\n);\n\nexport const addOrDeleteFavorite = createAsyncThunk(\n  \"stories/addOrDeleteFavorite\",\n  async ({\n    fetchMethod,\n    storyId,\n  }: {\n    fetchMethod: \"add\" | \"delete\";\n    storyId: string;\n  }) => {\n    const response = await fetch(\n      `${BASE_URL}/users/${storedUsername}/favorites/${storyId}`,\n      {\n        method: fetchMethod === \"add\" ? \"POST\" : \"DELETE\",\n        body: JSON.stringify({\n          token: storedToken,\n        }),\n      }\n    );\n    if (!response.ok) {\n      throw new Error(`${fetchMethod} favorite failed`);\n    }\n    const userData = await response.json();\n    return userData;\n  }\n);\n\nexport const deleteStory = createAsyncThunk(\n  \"stories/deleteStory\",\n  async ({ storyId }: { storyId: string }) => {\n    const response = await fetch(`${BASE_URL}/stories/${storyId}`)\n  }\n);\n\nexport default fetchStories;\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AAEnD,OAAO,MAAMC,QAAQ,GAAG,yCAAyC;AACjE,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AACvD,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAEjD,OAAO,MAAME,YAAY,GAAGN,gBAAgB,CACzC,sBAAqB,EACtB,YAAY;EACV,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,GAAG,UAAU,CAAC,CAACQ,IAAI,CAAEF,QAAQ,IAChEA,QAAQ,CAACG,IAAI,CAAC,CAChB,CAAC;EACDC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACM,OAAO,CAAC;EAC7B,OAAON,QAAQ,CAACM,OAAO;AACzB,CACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGd,gBAAgB,CACtC,kBAAkB,EAClB,OAAO;EACLe,MAAM;EACNC,KAAK;EACLC;AAKF,CAAC,KAAK;EACJ,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,GAAG,UAAU,EAAE;IAClDiB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAEjB,WAAW;MAClBkB,KAAK,EAAE;QACLR,MAAM;QACNC,KAAK;QACLC;MACF;IACF,CAAC;EACH,CAAC,CAAC;EACF,IAAI,CAACV,QAAQ,CAACiB,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,MAAMC,SAAS,GAAG,MAAMnB,QAAQ,CAACG,IAAI,CAAC,CAAC;EACvCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEc,SAAS,CAAC;EACzC,OAAOA,SAAS;AAClB,CACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG3B,gBAAgB,CACjD,6BAA6B,EAC7B,OAAO;EACL4B,WAAW;EACXC;AAIF,CAAC,KAAK;EACJ,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEP,QAAS,UAASC,cAAe,cAAa2B,OAAQ,EAAC,EAC1D;IACEX,MAAM,EAAEU,WAAW,KAAK,KAAK,GAAG,MAAM,GAAG,QAAQ;IACjDT,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAEjB;IACT,CAAC;EACH,CACF,CAAC;EACD,IAAI,CAACE,QAAQ,CAACiB,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,GAAEG,WAAY,kBAAiB,CAAC;EACnD;EACA,MAAME,QAAQ,GAAG,MAAMvB,QAAQ,CAACG,IAAI,CAAC,CAAC;EACtC,OAAOoB,QAAQ;AACjB,CACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG/B,gBAAgB,CACzC,qBAAqB,EACrB,OAAO;EAAE6B;AAA6B,CAAC,KAAK;EAC1C,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,QAAS,YAAW4B,OAAQ,EAAC,CAAC;AAChE,CACF,CAAC;AAED,eAAevB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}